|-->tcp_check_req //(tcp_minisocks.c)
	|-->.syn_recv_sock //(tcp_ipv4.c)
		|-->tcp_v4_syn_recv_sock //(tcp_ipv4.c) syn接收处理
			|-->sk_acceptq_is_full //(tcp_ipv4.c) 检查accept的队列
				|-->sk_max_ack_backlog //(sock.h)
				

|-->inetsw_array //(af_inet.c) 定义传输层，例如TCP、UDP
	|-->inet_stream_ops //(af_inet.c)
		|-->.listen        = inet_listen //(af_inet.c)
			|-->inet_listen //(af_inet.c) 将socket状态迁移到listening状态				
				|-->inet_csk_listen_start //(inet_connection_sock.c)
					|-->sk->sk_max_ack_backlog = backlog //设置sk_max_ack_backlog的数值

struct fd {
    struct file 	*file;
    unsigned int 	flags;
};		

struct fdtable { //(include/linux/fdtable.h)
    unsigned int max_fds;
    struct file __rcu **fd;      /* current fd array */
    unsigned long *close_on_exec;
    unsigned long *open_fds;
    unsigned long *full_fds_bits;
    struct rcu_head rcu;
};

#define FMODE_PATH      ((__force fmode_t)0x4000)

static const struct net_proto_family inet_family_ops = {
    .family = PF_INET,
    .create = inet_create,
    .owner  = THIS_MODULE,
};//(net/ipv4/af_inet.c)


const struct proto_ops inet_stream_ops = {
    .family        = PF_INET,
    .owner         = THIS_MODULE,
    .release       = inet_release,
    .bind          = inet_bind,
    .connect       = inet_stream_connect,
    .socketpair    = sock_no_socketpair,
    .accept        = inet_accept,
    .getname       = inet_getname,
    .poll          = tcp_poll,
    .ioctl         = inet_ioctl,
    .listen        = inet_listen,
    .shutdown      = inet_shutdown,
    .setsockopt    = sock_common_setsockopt,
    .getsockopt    = sock_common_getsockopt,
    .sendmsg       = inet_sendmsg,
    .recvmsg       = inet_recvmsg,
    .mmap          = sock_no_mmap,
    .sendpage      = inet_sendpage,
    .splice_read       = tcp_splice_read,
    .read_sock     = tcp_read_sock,
    .sendmsg_locked    = tcp_sendmsg_locked,
    .sendpage_locked   = tcp_sendpage_locked,
    .peek_len      = tcp_peek_len,
#ifdef CONFIG_COMPAT
    .compat_setsockopt = compat_sock_common_setsockopt,
    .compat_getsockopt = compat_sock_common_getsockopt,
    .compat_ioctl      = inet_compat_ioctl,
#endif
};//(net/ipv4/af_inet.c) tcp协议

const struct proto_ops inet_dgram_ops = {
    .family        = PF_INET,
    .owner         = THIS_MODULE,
    .release       = inet_release,
    .bind          = inet_bind,
    .connect       = inet_dgram_connect,
    .socketpair    = sock_no_socketpair,
    .accept        = sock_no_accept,
    .getname       = inet_getname,
    .poll          = udp_poll,
    .ioctl         = inet_ioctl,
    .listen        = sock_no_listen,
    .shutdown      = inet_shutdown,
    .setsockopt    = sock_common_setsockopt,
    .getsockopt    = sock_common_getsockopt,
    .sendmsg       = inet_sendmsg,
    .recvmsg       = inet_recvmsg,
    .mmap          = sock_no_mmap,
    .sendpage      = inet_sendpage,
    .set_peek_off      = sk_set_peek_off,
#ifdef CONFIG_COMPAT
    .compat_setsockopt = compat_sock_common_setsockopt,
    .compat_getsockopt = compat_sock_common_getsockopt,
    .compat_ioctl      = inet_compat_ioctl,
#endif
};//(net/ipv4/af_inet.c) UDP协议

static const struct proto_ops inet_sockraw_ops = {
    .family        = PF_INET,
    .owner         = THIS_MODULE,
    .release       = inet_release,
    .bind          = inet_bind,
    .connect       = inet_dgram_connect,
    .socketpair    = sock_no_socketpair,
    .accept        = sock_no_accept,
    .getname       = inet_getname,
    .poll          = datagram_poll,
    .ioctl         = inet_ioctl,
    .listen        = sock_no_listen,
    .shutdown      = inet_shutdown,
    .setsockopt    = sock_common_setsockopt,
    .getsockopt    = sock_common_getsockopt,
    .sendmsg       = inet_sendmsg,
    .recvmsg       = inet_recvmsg,
    .mmap          = sock_no_mmap,
    .sendpage      = inet_sendpage,
#ifdef CONFIG_COMPAT
    .compat_setsockopt = compat_sock_common_setsockopt,
    .compat_getsockopt = compat_sock_common_getsockopt,
    .compat_ioctl      = inet_compat_ioctl,
#endif
};//(net/ipv4/af_inet.c) raw协议

struct tcphdr {
    __be16  source;
    __be16  dest;
    __be32  seq;
    __be32  ack_seq;
#if defined(__LITTLE_ENDIAN_BITFIELD) //小端数据存储结构
    __u16   res1:4,
        doff:4,
        fin:1,
        syn:1,
        rst:1,
        psh:1,
        ack:1,
        urg:1,
        ece:1,
        cwr:1;
#elif defined(__BIG_ENDIAN_BITFIELD) //大端数据存储结构排序
    __u16   doff:4, //tcp头部结构长度，以4字节对齐
        res1:4,
        cwr:1,
        ece:1,
        urg:1,
        ack:1,
        psh:1,
        rst:1,
        syn:1,
        fin:1;
#else
#error  "Adjust your <asm/byteorder.h> defines"
#endif
    __be16  window;
    __sum16 check;
    __be16  urg_ptr;
}; //(include/uapi/linux/tcp.h) tcp数据结构头

|-->tcp_ipv4 协议族的默认定义
i	|-->struct proto tcp_prot = {
    	.name           = "TCP",
    	.owner          = THIS_MODULE,
    	.close          = tcp_close,
    	.connect        = tcp_v4_connect,
    	.disconnect     = tcp_disconnect,
    	.accept         = inet_csk_accept,
    	.ioctl          = tcp_ioctl,
    	.init           = tcp_v4_init_sock,
    	.destroy        = tcp_v4_destroy_sock,
    	.shutdown       = tcp_shutdown,
    	.setsockopt     = tcp_setsockopt,
    	.getsockopt     = tcp_getsockopt,
    	.keepalive      = tcp_set_keepalive,
    	.recvmsg        = tcp_recvmsg,
    	.sendmsg        = tcp_sendmsg,
    	.sendpage       = tcp_sendpage,
    	.backlog_rcv        = tcp_v4_do_rcv,
    	.release_cb     = tcp_release_cb,
    	.hash           = inet_hash,
    	.unhash         = inet_unhash,
    	.get_port       = inet_csk_get_port,
    	.enter_memory_pressure  = tcp_enter_memory_pressure,
    	.leave_memory_pressure  = tcp_leave_memory_pressure,
    	.stream_memory_free = tcp_stream_memory_free,
    	.sockets_allocated  = &tcp_sockets_allocated,
    	.orphan_count       = &tcp_orphan_count,
    	.memory_allocated   = &tcp_memory_allocated,
    	.memory_pressure    = &tcp_memory_pressure,
    	.sysctl_mem     = sysctl_tcp_mem,
    	.sysctl_wmem        = sysctl_tcp_wmem,
    	.sysctl_rmem        = sysctl_tcp_rmem,
    	.max_header     = MAX_TCP_HEADER,
    	.obj_size       = sizeof(struct tcp_sock),
		.slab_flags     = SLAB_TYPESAFE_BY_RCU,
    	.twsk_prot      = &tcp_timewait_sock_ops,
    	.rsk_prot       = &tcp_request_sock_ops,
    	.h.hashinfo     = &tcp_hashinfo,
    	.no_autobind        = true,
#ifdef CONFIG_COMPAT
    	.compat_setsockopt  = compat_tcp_setsockopt,
    	.compat_getsockopt  = compat_tcp_getsockopt,
#endif
    	.diag_destroy       = tcp_abort,
};//(net/ipv4/tcp_ipv4.c)


|-->tcp的状态值
	enum {
	    TCP_ESTABLISHED = 1,
	    TCP_SYN_SENT,
	    TCP_SYN_RECV,
	    TCP_FIN_WAIT1,
	    TCP_FIN_WAIT2,
	    TCP_TIME_WAIT,
	    TCP_CLOSE,
	    TCP_CLOSE_WAIT,
	    TCP_LAST_ACK,
	    TCP_LISTEN,
	    TCP_CLOSING,    /* Now a valid state */
	    TCP_NEW_SYN_RECV,
	
	    TCP_MAX_STATES  /* Leave at the end! */
	}; //(tcp_states.h)

|-->tcp_ipv4 方法//(net/ipv4/tcp_ipv4.c)
	|-->const struct inet_connection_sock_af_ops ipv4_specific = {
    	.queue_xmit    = ip_queue_xmit,
    	.send_check    = tcp_v4_send_check,
    	.rebuild_header    = inet_sk_rebuild_header,
    	.sk_rx_dst_set     = inet_sk_rx_dst_set,
    	.conn_request      = tcp_v4_conn_request,
    	.syn_recv_sock     = tcp_v4_syn_recv_sock,
    	.net_header_len    = sizeof(struct iphdr),
    	.setsockopt    = ip_setsockopt,
    	.getsockopt    = ip_getsockopt,
    	.addr2sockaddr     = inet_csk_addr2sockaddr,
    	.sockaddr_len      = sizeof(struct sockaddr_in),
#ifdef CONFIG_COMPAT
    	.compat_setsockopt = compat_ip_setsockopt,
    	.compat_getsockopt = compat_ip_getsockopt,
#endif
    	.mtu_reduced       = tcp_v4_mtu_reduced,
	};
	
|-->tcp_request_sock_ipv4_ops //(net/ipv4/tcp_ipv4.c) tcp_ipv4的方法指针
	|-->static const struct tcp_request_sock_ops tcp_request_sock_ipv4_ops = {
		.mss_clamp  =   TCP_MSS_DEFAULT,
#ifdef CONFIG_TCP_MD5SIG
		.req_md5_lookup =   tcp_v4_md5_lookup,
		.calc_md5_hash  =   tcp_v4_md5_hash_skb,
#endif
		.init_req   =   tcp_v4_init_req,
#ifdef CONFIG_SYN_COOKIES
		.cookie_init_seq =  cookie_v4_init_sequence,
#endif
		.route_req  =   tcp_v4_route_req,
		.init_seq   =   tcp_v4_init_seq,
		.init_ts_off    =   tcp_v4_init_ts_off,
		.send_synack    =   tcp_v4_send_synack,
	};

|-->struct request_sock_ops tcp_request_sock_ops //(tcp_ipv4.c)
	|-->struct request_sock_ops tcp_request_sock_ops __read_mostly = {
    	.family     =   PF_INET,
    	.obj_size   =   sizeof(struct tcp_request_sock),
    	.rtx_syn_ack    =   tcp_rtx_synack,
    	.send_ack   =   tcp_v4_reqsk_send_ack,
    	.destructor =   tcp_v4_reqsk_destructor,
    	.send_reset =   tcp_v4_send_reset,
    	.syn_ack_timeout =  tcp_syn_ack_timeout,
	};

|-->inet_csk_reqsk_queue_add //(inet_connection_sock.c)
	|-->sk_acceptq_added //(sock.h)
	
|-->tcp_v4_rcv //(tcp_ipv4.c) 数据包进入tcp的数据入口
	|-->pskb_may_pull //(skbuff.h) 对数据包的头做一个校验，用tcp头的大小为基准进行判断
	|-->skb_checksum_init //(skbuff.h) tcp数据校验
	
	|-->if (sk->sk_state == TCP_LISTEN)
		|-->ret = tcp_v4_do_rcv(sk, skb) //(tcp_ipv4.c)
			|-->tcp_checksum_complete //()
			|-->if (sk->sk_state == TCP_LISTEN)
				|-->tcp_v4_cookie_check //(tcp_ipv4.c)
				
			|-->tcp_rcv_state_process //(tcp_input.c)
				|-->switch (sk->sk_state)
					|-->case TCP_LISTEN
						|-->if (th->syn) //接收connect的第一个数据包
							|-->icsk->icsk_af_ops->conn_request(sk, skb) //(tcp_input.c)
								|-->tcp_v4_conn_request //(tcp_ipv4.c)
									|-->tcp_conn_request(&tcp_request_sock_ops, &tcp_request_sock_ipv4_ops, sk, skb) //(tcp_input.c)
										|-->if (sk_acceptq_is_full(sk)) //(tcp_input.c)
												|-->return sk->sk_ack_backlog > sk->sk_max_ack_backlog //(sock.h) 判断ack队列值是否已经超过最大值，该值由listen的第二个参数设置
												
											|-->goto drop //
										
										|-->inet_reqsk_alloc //(tcp_input.c)
											|-->ireq->ireq_state = TCP_NEW_SYN_RECV //(tcp_input.c) 将状态设置为TCP_NEW_SYN_RECV, 15年开始使用该状态机替换TCP_SYN_RECV, TCP_SYN_RECV用于fast

										|-->tcp_parse_options //(tcp_input.c)
										|-->tcp_openreq_init //(tcp_input.c) 初始化变量
										|-->af_ops->init_req(req, sk, skb) //(tcp_input.c)
											|-->tcp_v4_init_req //(tcp_ipv4.c)
												|-->
										
										|-->af_ops->init_ts_off //(tcp_input.c)
										|-->af_ops->route_req(sk, &fl, req) //()
										|-->tcp_ecn_create_request //()
										|-->tcp_openreq_init_rwin //()
										|-->inet_csk_reqsk_queue_hash_add(sk, req, tcp_timeout_init((struct sock *)req))
											|-->reqsk_queue_hash_req(req, timeout) //(inet_connection_sock.c)
												|-->setup_pinned_timer(&req->rsk_timer, reqsk_timer_handler, (unsigned long)req)
													|-->reqsk_timer_handler //(inet_connection_sock.c)
														|-->req->rsk_ops->syn_ack_timeout //(inet_connection_sock.c)
															|-->tcp_syn_ack_timeout //(tcp_timer.c)

											|-->inet_csk_reqsk_queue_added //()

										|-->af_ops->send_synack //(tcp_input.c)
											|-->tcp_v4_send_synack //(tcp_ipv4.c)
												|-->inet_csk_route_req //()
												|-->tcp_make_synack //(tcp_output.c) 准备SYN-ACK数据包
													|-->th->syn = 1 //(tcp_output.c)
													|-->th->ack = 1 //(tcp_output.c)
												
												|-->__tcp_v4_send_check //()
												|-->ip_build_and_send_pkt //(ip_output.c)
													|-->ip_local_out //(ip_output.c)
														|-->__ip_local_out //()
														|-->dst_output //() 将数据发送出去

												|-->net_xmit_eval //()
		
		|-->return ret //(tcp_ipv4.c)
	
	|-->sk_incoming_cpu_update //()
	|-->tcp_segs_in //()
	|-->sock_owned_by_user //()
	|-->tcp_v4_do_rcv //(tcp_ipv4.c)
		|-->sock_rps_save_rxhash //()
		|-->tcp_rcv_state_process //(tcp_input.c)
			|-->switch(sk->sk_state)
				|-->case TCP_SYN_SENT //(tcp_input.c) socket接收到listen返回的ack+syn后的状态
					|-->tcp_mstamp_refresh //()
					|-->tcp_rcv_synsent_state_process //(tcp_input.c)
						|-->tcp_parse_options //()
						|-->if (th->ack) //(tcp_input.c) 接收到的数据中ack为1
							|-->if (th->rst) 
								|-->tcp_reset(sk) //(tcp_input.c)
								|-->tcp_drop //
								|-->return 0;
							
							|-->else
								|-->tcp_ecn_rcv_synack //()
								|-->tcp_init_wl //()
								|-->tcp_ack //()
								|-->tcp_mtup_init //()
								|-->tcp_sync_mss //()
								|-->tcp_initialize_rcv_mss //()
								|-->tcp_finish_connect //(tcp_input.c)
									|-->tcp_set_state(sk, TCP_ESTABLISHED) //(tcp_input.c) 进入ESTABLISHED状态
									|-->icsk->icsk_af_ops->sk_rx_dst_set //(tcp_input.c)
										|-->inet_sk_rx_dst_set //(tcp_ipv4.c)

									|-->security_inet_conn_established //()
									|-->icsk->icsk_af_ops->rebuild_header //()
									|-->tcp_init_metrics //()
									|-->tcp_call_bpf //()
									|-->tcp_init_congestion_control //()
									|-->tcp_init_buffer_space //()

								|-->tcp_rcv_fastopen_synack //()
								|-->tcp_send_ack //(tcp_output.c) 发送ask，并更新window大小
									|-->tcp_init_nondata_skb(buff, tcp_acceptable_seq(sk), TCPHDR_ACK) //
									|-->skb_set_tcp_pure_ack //
									|-->tcp_transmit_skb //(tcp_output.c)


	|-->tcp_add_backlog //(tcp_ipv4.c)
		|-->sk_add_backlog //(sock.h)
			|-->sk_rcvqueues_full //()
			|-->__sk_add_backlog //()


|-->connect // 应用层
	|-->SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr, int, addrlen)//(net/socket.c)
		|-->sock->ops->connect //(socket.c)
			|-->inet_stream_connect //(af_inet.c)
				|-->__inet_stream_connect(sock, uaddr, addr_len, flags, 0) //(af_inet.c)
					|-->switch(sock->state)
						|-->case SS_UNCONNECTED //初始状态为该状态
							|-->sk->sk_prot->connect //(af_inet.c)
								|-->tcp_v4_connect //(tcp_ipv4.c)
									|-->ip_route_connect //()
									|-->sk_rcv_saddr_set //()
									|-->sk_daddr_set //()
									|-->tcp_set_state(sk, TCP_SYN_SENT) //(net/ipv4/tcp.c) 设置sk的状态为TCP_SYN_SENT
									|-->inet_hash_connect //()
									|-->sk_set_txhash //()
									|-->ip_route_newports //()
									|-->tp->write_seq = secure_tcp_seq(inet->inet_saddr,
                               											inet->inet_daddr,
                               											inet->inet_sport,
                               											usin->sin_port) //(tcp_ipv4.c) 计算seq的初始化值,根据源端口，目的端口，源ip地址，目的ip地址进行的hash算法
											|-->net_secret_init //()
											|-->hash = siphash_3u32((__force u32)saddr, (__force u32)daddr,
                								(__force u32)sport << 16 | (__force u32)dport, &net_secret) //(secure_seq.c) 将源端口左移16到高位，目的端口为低16位
											|-->seq_scale(hash) //(secure_seq.c)
												|-->return seq + (ktime_get_real_ns() >> 6) //(secure_seq.c) 是一个计时器，这个计时器每隔4毫秒加1, 加上之前hash的结果值等于seq的初始化值

									|-->tp->tsoffset = secure_tcp_ts_off(sock_net(sk),
                         												inet->inet_saddr,
                         												inet->inet_daddr) //(tcp_ipv4.c)

									|-->tcp_connect //(tcp_output.c) Build a SYN and send it off 
										|-->tcp_connect_init //(tcp_output.c)
											|-->

										|-->tcp_init_nondata_skb(buff, tp->write_seq++, TCPHDR_SYN) //(tcp_output.c) 设置tcp_flags为SYN，为传输构造函数做准备
										|-->tcp_mstamp_refresh //()													
										|-->tp->retrans_stamp = tcp_time_stamp(tp) //								
										|-->tcp_connect_queue_skb //(tcp_output.c)									
																													
										|-->tcp_ecn_send_syn //(tcp_output.c)										
											|-->																	
																													
										|-->tp->fastopen_req ? tcp_send_syn_data(sk, buff) :						
       											tcp_transmit_skb(sk, buff, 1, sk->sk_allocation)//(tcp_output.c)	
											|-->case tcp_send_syn_data //(tcp_output.c)								
												|-->TCP_SKB_CB(syn_data)->tcp_flags = TCPHDR_ACK | TCPHDR_PSH // (tcp_output.c) (设置flags)
												|-->tcp_transmit_skb //(tcp_output.c)								
													|-->if (unlikely(tcb->tcp_flags & TCPHDR_SYN)) //(tcp_output.c)
														|-->tcp_syn_options //(tcp_output.c)
															|-->
													
													|-->else
														|-->tcp_established_options //
													
											|-->case tcp_transmit_skb //(tcp_output.c)
												|-->*(((__be16 *)th) + 6) = htons(((tcp_header_size >> 2) << 12) | tcb->tcp_flags) //(tcp_output.c) 为tcp头赋值，并使用tcp_flags表示flag，如果为connect，则该值为TCPHDR_SYN(0x02) 即数据包中包含SYN
												|-->icsk->icsk_af_ops->queue_xmit //(tcp_output.c)
													|-->ip_queue_xmit //()
							
										|-->inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS, inet_csk(sk)->icsk_rto, TCP_RTO_MAX)//(inet_connection_sock.h)设置timer，用于接收server的ACK_SYN返回值
											|-->sk_reset_timer(sk, &icsk->icsk_retransmit_timer, icsk->icsk_timeout) //设置定时器，用于重传SYN数据包

							|-->sock->state = SS_CONNECTING //(af_inet.c)
							|-->sock_sndtimeo //()
							|-->
		
|-->socket //应用层
	|-->SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol) //(net/socket.c) kernel层
		|-->sock_create //(socket.c)
			|-->__sock_create //(socket.c)
				|-->pf->create //(socket.c) 根据传入的协议类似选择相应的create回调函数
					|-->inet_create //(net/ipv4/af_inet.c) AF_INET协议
						|-->sock->state = SS_UNCONNECTED; //(af_inet.c) 设置其初始状态
						|-->sock_init_data //(af_inet.c)
						|-->sk->sk_prot->init //(af_inet.c)
							|-->tcp_v4_init_sock //(tcp_ipv4.c) tcp的init回调函数
								|-->inet_csk //()
								|-->tcp_init_sock //(net/ipv4/tcp.c)
									|-->sk->sk_state = TCP_CLOSE //(初始状态)
									|-->sk->sk_sndbuf = sysctl_tcp_wmem[1] //(默认发送buff)
									|-->sk->sk_rcvbuf = sysctl_tcp_rmem[1] //(默认读取buff)
								
								|-->icsk->icsk_af_ops = &ipv4_specific //(tcp_ipv4.c) 为tcp_ipv4绑定默认的方法
						 
						|-->BPF_CGROUP_RUN_PROG_INET_SOCK //(af_inet.c)
		
		|-->sock_map_fd //(socket.c) 最终返回的fd文件描述符
			|-->get_unused_fd_flags //(file.c) 获取一个未使用的fd，最终返回的也是该值
				|-->__alloc_fd //(file.c)
					|-->files_fdtable //(fdtable.h) 获取文件描述符
					|-->find_next_fd //(file.c) 查找下一个ID
					|-->expand_files //() 拓展文件表，用于在fd已经超过fd_max时使用
					|-->__set_open_fd //(file.c)  将分配到的fd放入open链表中
			
			|-->sock_alloc_file //()
			|-->IS_ERR(newfile) //()
			|-->fd_install(fd, newfile) //(file.c)
				|-->__fd_install //(file.c)
					|-->rcu_assign_pointer(fdt->fd[fd], file) //(rcupdate.h) 将fd与文件关联起来, 该函数与下面的fdget对应起来
			
			|-->return fd //()
			

|-->listen //应用层
	|-->SYSCALL_DEFINE2(listen, int, fd, int, backlog) //(net/socket.c) kernel层
		|-->sock = sockfd_lookup_light //(socket.c)
			|-->fdget //(include/linux/file.h)
				|-->__to_fd(__fdget(fd)) //(file.h)
					|-->__fdget //(file.c)
						|-->__fget_light(fd, FMODE_PATH) //(file.c)
							|-->if 只有一个拥有者
								|-->__fcheck_files(files, fd) //(fdtable.h) 返回file指针
									|-->rcu_dereference_raw(fdt->fd[fd]) //(fdtable.h)
										|-->current->fdt->fd[fd]
							
							|-->else
								|-->__fget(fd, mask) //(file.c)
									|-->fcheck_files //(fdtable.h)
										|-->__fcheck_files //(fdtable.h)
					
					|-->return (struct fd){(struct file *)(v & ~3),v & 3}; //返回结构体
				
			|-->sock_from_file //(socket.c) 根据文件获取sock地址
				|-->return file->private_data //(socket.c)
			
		|-->if(sock)
			|-->sock_net //(sock.h)
				|-->read_pnet //(net_namespace.h)
					|-->return &init_net;
			
			|-->security_socket_listen //()
			|-->sock->ops->listen //(socket.c)
				|-->inet_listen //(af_inet.c) tcp协议中的监听
					|-->inet_csk_listen_start //(inet_connection_sock.c)
						|-->sk->sk_max_ack_backlog = backlog //(inet_connection_sock.c)
						|-->sk->sk_ack_backlog = 0 //(inet_connection_sock.c)
						|-->sk_state_store(sk, TCP_LISTEN) //(inet_connection_sock.c) 将状态设置我哦TCP_LISTEN
						|-->inet_csk_delack_init //()
						|-->sk->sk_prot->get_port //(inet_csk_get_port.c)
							|-->inet_csk_get_port //(inet_connection_sock.c)
								|-->

						|-->sk_dst_reset //()
						|-->sk->sk_prot->hash //()

					|-->sk->sk_max_ack_backlog = backlog; //

|-->tcp_rcv_synsent_state_process //(tcp_input.c)
	|-->if (th->syn)
		|-->tcp_set_state(sk, TCP_SYN_RECV) //(tcp_input.c)


|-->tcp_check_req //(tcp_minisocks.c)
	|-->tcp_v4_syn_recv_sock //(tcp_ipv4.c)
		|-->tcp_create_openreq_child //(net/ipv4/tcp_minisocks.c)
			|-->inet_csk_clone_lock //(inet_connection_sock.c)
				|-->newsk->sk_state = TCP_SYN_RECV //(inet_connection_sock.c)
