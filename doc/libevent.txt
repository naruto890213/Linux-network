|-->重要数据库
|-->event_base //(event-internal.h)
	|-->struct event_base {
	    /** Function pointers and other data to describe this event_base's
	     * backend. */
	    const struct eventop *evsel;
	    /** Pointer to backend-specific data. */
	    void *evbase;
	
	    /** List of changes to tell backend about at next dispatch.  Only used
	     * by the O(1) backends. */
	    struct event_changelist changelist;
	
	    /** Function pointers used to describe the backend that this event_base
	     * uses for signals */
	    const struct eventop *evsigsel;
	    /** Data to implement the common signal handler code. */
	    struct evsig_info sig;
	
	    /** Number of virtual events */
	    int virtual_event_count;
		/** Maximum number of virtual events active */
	    int virtual_event_count_max;
	    /** Number of total events added to this event_base */
	    int event_count;
	    /** Maximum number of total events added to this event_base */
	    int event_count_max;
	    /** Number of total events active in this event_base */
	    int event_count_active;
	    /** Maximum number of total events active in this event_base */
	    int event_count_active_max;
	
	    /** Set if we should terminate the loop once we're done processing
	     * events. */
	    int event_gotterm;
	    /** Set if we should terminate the loop immediately */
	    int event_break;
	    /** Set if we should start a new instance of the loop immediately. */
	    int event_continue;
	
	    /** The currently running priority of events */
	    int event_running_priority;
	
	    /** Set if we're running the event_base_loop function, to prevent
	     * reentrant invocation. */
	    int running_loop;
		/** Set to the number of deferred_cbs we've made 'active' in the
	     * loop.  This is a hack to prevent starvation; it would be smarter
	     * to just use event_config_set_max_dispatch_interval's max_callbacks
	     * feature */
	    int n_deferreds_queued;
	
	    /* Active event management. */
	    /** An array of nactivequeues queues for active event_callbacks (ones
	     * that have triggered, and whose callbacks need to be called).  Low
	     * priority numbers are more important, and stall higher ones.
	     */
	    struct evcallback_list *activequeues;
	    /** The length of the activequeues array */
	    int nactivequeues;
	    /** A list of event_callbacks that should become active the next time
	     * we process events, but not this time. */
	    struct evcallback_list active_later_queue;
	
	    /* common timeout logic */
	
	    /** An array of common_timeout_list* for all of the common timeout
	     * values we know. */
	    struct common_timeout_list **common_timeout_queues;
	    /** The number of entries used in common_timeout_queues */
	    int n_common_timeouts;
	    /** The total size of common_timeout_queues. */
	    int n_common_timeouts_allocated;
		/** Mapping from file descriptors to enabled (added) events */
	    struct event_io_map io;
	
	    /** Mapping from signal numbers to enabled (added) events. */
	    struct event_signal_map sigmap;
	
	    /** Priority queue of events with timeouts. */
	    struct min_heap timeheap;
	
	    /** Stored timeval: used to avoid calling gettimeofday/clock_gettime
	     * too often. */
	    struct timeval tv_cache;
	
	    struct evutil_monotonic_timer monotonic_timer;
	
	    /** Difference between internal time (maybe from clock_gettime) and
	     * gettimeofday. */
	    struct timeval tv_clock_diff;
	    /** Second in which we last updated tv_clock_diff, in monotonic time. */
	    time_t last_updated_clock_diff;
		#ifndef EVENT__DISABLE_THREAD_SUPPORT
	    /* threading support */
	    /** The thread currently running the event_loop for this base */
	    unsigned long th_owner_id;
	    /** A lock to prevent conflicting accesses to this event_base */
	    void *th_base_lock;
	    /** A condition that gets signalled when we're done processing an
	     * event with waiters on it. */
	    void *current_event_cond;
	    /** Number of threads blocking on current_event_cond. */
	    int current_event_waiters;
	#endif
	    /** The event whose callback is executing right now */
	    struct event_callback *current_event;
	
	#ifdef _WIN32
	    /** IOCP support structure, if IOCP is enabled. */
	    struct event_iocp_port *iocp;
	#endif
		/** Flags that this base was configured with */
	    enum event_base_config_flag flags;
	
	    struct timeval max_dispatch_time;
	    int max_dispatch_callbacks;
	    int limit_callbacks_after_prio;
	
	    /* Notify main thread to wake up break, etc. */
	    /** True if the base already has a pending notify, and we don't need
	     * to add any more. */
	    int is_notify_pending;
	    /** A socketpair used by some th_notify functions to wake up the main
	     * thread. */
	    evutil_socket_t th_notify_fd[2];
	    /** An event used by some th_notify functions to wake up the main
	     * thread. */
	    struct event th_notify;
	    /** A function used to wake up the main thread from another thread. */
	    int (*th_notify_fn)(struct event_base *base);
	
	    /** Saved seed for weak random number generator. Some backends use
	     * this to produce fairness among sockets. Protected by th_base_lock. */
	    struct evutil_weakrand_state weakrand_seed;
	
	    /** List of event_onces that have not yet fired. */
	    LIST_HEAD(once_event_list, event_once) once_events;
	};

|-->event_config //(event-internal.h) event配置结构体
	|-->struct event_config {
	    TAILQ_HEAD(event_configq, event_config_entry) entries;
	    int n_cpus_hint;
	    struct timeval max_dispatch_interval;
	    int max_dispatch_callbacks;
	    int limit_callbacks_after_prio;
	    enum event_method_feature require_features;
	    enum event_base_config_flag flags;
	};  

static const struct eventop epollops_changelist = {
    "epoll (with changelist)",
    epoll_init,
    event_changelist_add_,
    event_changelist_del_,
    epoll_dispatch,
    epoll_dealloc,
    1, /* need reinit */
    EV_FEATURE_ET|EV_FEATURE_O1| EARLY_CLOSE_IF_HAVE_RDHUP,
    EVENT_CHANGELIST_FDINFO_SIZE
};

	
const struct eventop epollops = { 
    "epoll",
    epoll_init,
    epoll_nochangelist_add,
    epoll_nochangelist_del,
    epoll_dispatch,
    epoll_dealloc,
    1, /* need reinit */
    EV_FEATURE_ET|EV_FEATURE_O1|EV_FEATURE_EARLY_CLOSE,
    0   
};

static const struct eventop evsigops = {
    "signal",
    NULL,
    evsig_add,
    evsig_del,
    NULL,
    NULL,
    0, 0, 0
};



|-->eventops //(event.c)操作方法定义，根据系统支持进行选择
static const struct eventop *eventops[] = {
#ifdef EVENT__HAVE_EVENT_PORTS
    &evportops,
#endif
#ifdef EVENT__HAVE_WORKING_KQUEUE
    &kqops,
#endif
#ifdef EVENT__HAVE_EPOLL
    &epollops, //linux下默认选择为epoll
#endif
#ifdef EVENT__HAVE_DEVPOLL
    &devpollops,
#endif
#ifdef EVENT__HAVE_POLL
    &pollops,
#endif
#ifdef EVENT__HAVE_SELECT
    &selectops,
#endif
#ifdef _WIN32
    &win32ops,
#endif
    NULL
};




|-->event_base_new //(event.c) 新建一个base实例
	|-->event_config_new //(event.c)
		|-->cfg = mm_calloc(1, sizeof(*cfg))
		|-->TAILQ_INIT(&cfg->entries)
		|-->cfg->max_dispatch_interval.tv_sec = -1
		|-->cfg->max_dispatch_callbacks = INT_MAX
		|-->cfg->limit_callbacks_after_prio = 1
		
	|-->event_base_new_with_config //(event.c)
		|-->base = mm_calloc(1, sizeof(struct event_base))
		|-->base->sig.ev_signal_pair[0] = -1
		|-->base->sig.ev_signal_pair[1] = -1
		|-->base->th_notify_fd[0] = -1
		|-->base->th_notify_fd[1] = -1
		|-->base->evbase = NULL
		|-->event_config_is_avoided_method(cfg, eventops[i]->name) //判断是否可用
		|-->base->evsel = eventops[i] //将全局变量赋值给base中的变量，在linux中默认为 epollops
		|-->base->evbase = base->evsel->init(base)
			|-->epoll_init //(epoll.c)
				|-->evsig_init_ //(signal.c)
					|-->base->evsigsel = &evsigops
				
		|-->event_base_priority_init(base, 1) //(event.c)
			|-->base->nactivequeues = npriorities //设置active队列个数，将在dispatch中使用

		|-->evthread_make_base_notifiable //(event.c)
			|-->evthread_make_base_notifiable_nolock_ //(event.c)
				|-->evutil_make_internal_pipe_(base->th_notify_fd) //(evutil.c)
					|-->pipe //创建管道，用于绑定
					|-->evutil_fast_socket_nonblocking //设置为非阻塞
					|-->evutil_fast_socket_closeonexec //关闭执行权限
					|-->return 0 
					
				|-->base->th_notify_fn = evthread_notify_base_default //设置提醒函数
				|-->cb = evthread_notify_drain_default //(event.c)
					|-->
				
				|-->event_assign(&base->th_notify, base, base->th_notify_fd[0], EV_READ|EV_PERSIST, cb, base) //设置回调函数
				|-->return event_add_nolock_ //(event.c)
					|-->if (ev->ev_events & (EV_READ|EV_WRITE|EV_CLOSED))
						|-->evmap_io_add_ //(evmap.c)
							|-->evsel->add //(evmap.c) 调用回调函数
								|-->epoll_nochangelist_add //(epoll.c)
									|-->if(events & EV_WRITE)
										|-->ch.write_change = EV_CHANGE_ADD | (events & EV_ET)
										
									|-->if (events & EV_READ)
										|-->ch.read_change = EV_CHANGE_ADD | (events & EV_ET)
										
									|-->if (events & EV_CLOSED)
										|-->ch.close_change = EV_CHANGE_ADD | (events & EV_ET)
									
									|-->epoll_apply_changes //(epoll.c)
										|-->if ((ch->read_change|ch->write_change) & EV_CHANGE_ET)
											|-->events |= EPOLLET
											
										|-->epoll_apply_one_change //(epoll.c)
											|-->epoll_ctl //(epoll.c) 设置epoll
						
					|-->else if (ev->ev_events & EV_SIGNAL)
						|-->evmap_signal_add_ //(evmap.c)
							|-->evsel = base->evsigsel
							|-->evsel->add(base, ev->ev_fd, 0, EV_SIGNAL, NULL) //(evmap.c) 调用回调函数
								|--> evsig_add//(signal.c)
									|-->
						
					
					|-->event_queue_insert_inserted //()
					
	|-->event_config_free //()
	

|-->running_loop 
|-->event_base_loopbreak
|-->event_base_loopcontinue

|-->event_callback_activate_ 
|-->event_deferred_cb_schedule_
	
|-->event_callback_activate_later_nolock_ //(event.c)
|-->event_callback_activate_nolock_ //(event.c)
	|-->evthread_notify_base //(event.c)
		|-->base->th_notify_fn //(event.c) 
			|-->evthread_notify_base_default //(event.c) 实际调用的为该函数
				|-->buf[0] = (char) 0
				|-->write(base->th_notify_fd[1], buf, 1) //写入一个字节


|-->event_set //(event.c)
	|-->event_assign //(event.c)
		|-->ev->ev_callback = callback
		|-->ev->ev_fd = fd
		|-->ev->ev_events = events
		|-->ev->ev_flags = EVLIST_INIT
		|-->ev->ev_ncalls = 0
		|-->ev->ev_pncalls = NULL
		|-->if (events & EV_SIGNAL)
			|-->ev->ev_closure = EV_CLOSURE_EVENT_SIGNAL
		
		|-->else
			|-->if (events & EV_PERSIST)
				|-->ev->ev_closure = EV_CLOSURE_EVENT_PERSIST
			
			|-->else
				|-->ev->ev_closure = EV_CLOSURE_EVENT


|-->epoll_nochangelist_add //(epoll.c)
	|-->epoll_apply_changes //(epoll.c)
		|-->epoll_apply_one_change //(epoll.c)

|-->event_loop //(event.c)
	|-->event_base_loop //(event.c)
		|-->loop
			|-->evsel->dispatch //(event.c)
				|-->epoll_dispatch //(epoll.c)
					|-->epoll_wait //(epoll.c)
					|-->evmap_io_active_ //(evmap.c)
						|-->
				
			|-->event_process_active //(event.c)
				|-->if(base->nactivequeues)
					|-->event_process_active_single_queue //(event.c)
						switch (evcb->evcb_closure)
							|-->case EV_CLOSURE_EVENT_SIGNAL:
								|-->event_signal_closure //(event.c)
									|-->ncalls = ev->ev_ncalls
									|-->while(ncalls)
										|-->(*ev->ev_callback)(ev->ev_fd, ev->ev_res, ev->ev_arg) //调用event_set中设置的回调函数
										
							|-->case EV_CLOSURE_EVENT_PERSIST:
								|-->event_persist_closure //(event.c)
									|-->(evcb_callback)(evcb_fd, evcb_res, evcb_arg) //调用event_set中设置的回调函数
								
							|-->case EV_CLOSURE_EVENT:
								|-->(*ev->ev_callback)(ev->ev_fd, ev->ev_res, ev->ev_arg)
								
								
								
|-->event_del //(event.c)
	|-->event_del_(ev, EVENT_DEL_AUTOBLOCK) //(event.c)
		|-->event_del_nolock_ //(event.c)
			|-->if (ev->ev_events & (EV_READ|EV_WRITE|EV_CLOSED))
				|-->evmap_io_del_ //(evmap.c)
					|-->evsel->del //(evmap.c)
						|-->epoll_nochangelist_del //(epoll.c)
							|-->epoll_apply_one_change //(epoll.c)
								|-->op = epoll_op_table[idx].op
								|-->epoll_ctl(epollop->epfd, op, ch->fd, &epev) //(epoll.c)
				
			|-->else
				|-->evmap_signal_del_ //()
			
			