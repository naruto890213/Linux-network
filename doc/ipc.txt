|-->pipe 数据结构体 //(pipe_fs_i.h)
	|-->struct pipe_inode_info {
			struct mutex mutex;
			wait_queue_head_t wait; //管道/FIFO等待队列
			unsigned int nrbufs, curbuf, buffers; //包含待读数据的缓冲区数、包含待读数据的第一个缓冲区的索引、包含待读的buffer
			unsigned int readers; //读进程的标志或者编号
			unsigned int writers; //写进程的标志或者编号
			unsigned int files;
			unsigned int waiting_writers;
			unsigned int r_counter; //与readers类似，但当等待读取FIFO的进程时使用
			unsigned int w_counter; //与writers类似，但当等待写入FIFO的进程时使用
			struct page *tmp_page;
			struct fasync_struct *fasync_readers; //用于通过信号进行的异步IO通知
			struct fasync_struct *fasync_writers; //用于通过信号进行的异步IO通知
			struct pipe_buffer *bufs;
			struct user_struct *user;
		};
		
|-->pipe_buffer 数据结构体 //(pipe_fs_i.h)
	|-->struct pipe_buffer {
			struct page *page; //管道缓冲区页框的描述符地址
			unsigned int offset, len; //页框内有效数据的当前位置、长度
			const struct pipe_buf_operations *ops; //管道缓冲区方法表的地址
			unsigned int flags; //标志
			unsigned long private;
		};

|-->pipe_write //(fs/pipe.c)		
	|-->buf->ops = &anon_pipe_buf_ops //(fs/pipe.c)
		|-->anon_pipe_buf_ops //(pipe.c)
			|-->static const struct pipe_buf_operations anon_pipe_buf_ops = {
					.can_merge = 1, 
					.confirm = generic_pipe_buf_confirm,
					.release = anon_pipe_buf_release,
					.steal = anon_pipe_buf_steal,
					.get = generic_pipe_buf_get,
				};
				
|-->pipefifo_fops//

|-->pipe 文件系统初始化
	|-->init_pipe_fs //(pipe.c)
	
|-->pipe 创建
	|-->SYSCALL_DEFINE1(pipe, int __user *, fildes) //(pipe.c)
		|-->sys_pipe2 //(pipe.c)
			|-->SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags) //(pipe.c)
				|-->__do_pipe_flags //(pipe.c)
					|-->create_pipe_files //(pipe.c)
						|-->get_pipe_inode //(pipe.c)
							|-->new_inode_pseudo //()
							|-->get_next_ino //()
							|-->alloc_pipe_info //()
							|-->inode->i_fop = &pipefifo_fops //(pipe.c)
								|-->const struct file_operations pipefifo_fops = {
										.open       = fifo_open,
										.llseek     = no_llseek,
										.read_iter  = pipe_read,
										.write_iter = pipe_write,
										.poll       = pipe_poll,
										.unlocked_ioctl = pipe_ioctl,
										.release    = pipe_release,
										.fasync     = pipe_fasync,
									};
							
						|-->mntget //()
						|-->alloc_file(&path, FMODE_WRITE, &pipefifo_fops) //
						|-->path_get //()
					
					|-->get_unused_fd_flags //(pipe.c)
					|-->audit_fd_pair //(pipe.c)
					
					
|-->pipe //(pipe.c)
	|-->pipe_read //(pipe.c) 从管道中读取数据
		|-->pipe_buf_confirm //(pipe_fs_i.h)
			|-->buf->ops->confirm //(pipe_fs_i.h)
				|-->page_cache_pipe_buf_confirm //(pipe.c)
					|-->return 0 //(pipe.c)
		
		|-->copy_page_to_iter //(iov_iter.c)
			|-->page_copy_sane //()
			|-->copy_page_to_iter_pipe //(iov_iter.c)
				|-->buf->ops = &page_cache_pipe_buf_ops //(splice.c)
					|-->const struct pipe_buf_operations page_cache_pipe_buf_ops = {
							.can_merge = 0,
							.confirm = page_cache_pipe_buf_confirm,
							.release = page_cache_pipe_buf_release,
							.steal = page_cache_pipe_buf_steal,
							.get = generic_pipe_buf_get,
						};
		
		|-->if (!buf->len)
			|-->pipe_buf_release //()
			
	|-->pipe_write //(pipe.c) 向管道写入数据
		|-->

---------------------------------------------------------------------------------------------------

|-->pipe //(fs/pipe.c) 有名管道
	|-->const struct file_operations pipefifo_fops = {
		    .open       = fifo_open,
		    .llseek     = no_llseek,
		    .read_iter  = pipe_read,
		    .write_iter = pipe_write,
		    .poll       = pipe_poll,
		    .unlocked_ioctl = pipe_ioctl,
		    .release    = pipe_release,
		    .fasync     = pipe_fasync,
		};

		|-->fifo_open //(pipe.c)
			|-->


|-->System V IPC//(ipc目录)
#define shm_ids(ns) ((ns)->ids[IPC_SHM_IDS]) //(util.h)
#define IPC_SEM_IDS 0 //(util.h)
#define IPC_MSG_IDS 1 //(util.h)
#define IPC_SHM_IDS 2 //(util.h)

	|-->struct ipc_namespace { //(ipc_namespace.h)
			refcount_t  count;
			struct ipc_ids  ids[3]; //结构体数组，分别是sem、msg、shm
			int     sem_ctls[4];
			........
		};
	
	|-->struct ipc_ids { //(ipc_namespace.h)
		    int in_use; //已分配IPC资源
		    unsigned short seq; //xiayige分配的位置使用序号
		    struct rw_semaphore rwsem; //
		    struct idr ipcs_idr; //
		    int next_id; //
			struct rhashtable key_ht; //
		};

	|-->struct idr { //(idr.h)
    		struct radix_tree_root  idr_rt;
    		unsigned int        idr_next;
		};

	|-->struct rw_semaphore { //(rwsem-spinlock.h)
		    __s32           count;
		    raw_spinlock_t      wait_lock;
		    struct list_head    wait_list;
		#ifdef CONFIG_DEBUG_LOCK_ALLOC
		    struct lockdep_map dep_map;
		#endif
		};
		
	|-->struct rhashtable { //(rhashtable.h)
			struct bucket_table __rcu   *tbl;
			atomic_t            nelems;
			unsigned int            key_len;
			struct rhashtable_params    p;
			unsigned int            max_elems;
			bool                rhlist;
			struct work_struct      run_work;
			struct mutex                    mutex;
			spinlock_t          lock;
		}; 
		
	|-->struct sem_array { //(sem.h)
			struct kern_ipc_perm    sem_perm;   /* permissions .. see ipc.h */
			time64_t        sem_ctime;  /* create/last semctl() time */
			struct list_head    pending_alter;  /* pending operations */
								/* that alter the array */
			struct list_head    pending_const;  /* pending complex operations */
								/* that do not alter semvals */
			struct list_head    list_id;    /* undo requests on this array */
			int         sem_nsems;  /* no. of semaphores in array */
			int         complex_count;  /* pending complex operations */
			unsigned int        use_global_lock;/* >0: global lock required */

			struct sem      sems[];
		} __randomize_layout;

	|-->struct kern_ipc_perm {
		    spinlock_t  lock;
		    bool        deleted;
		    int     id; 
		    key_t       key;
		    kuid_t      uid;
		    kgid_t      gid;
		    kuid_t      cuid;
		    kgid_t      cgid;
		    umode_t     mode;
		    unsigned long   seq;
		    void        *security;
		} ____cacheline_aligned_in_smp;
		
	|-->static const struct rhashtable_params ipc_kht_params = { //(util.c)
			.head_offset        = offsetof(struct kern_ipc_perm, khtnode),
			.key_offset     = offsetof(struct kern_ipc_perm, key),
			.key_len        = FIELD_SIZEOF(struct kern_ipc_perm, key),
			.locks_mul      = 1,
			.automatic_shrinking    = true,
		};
		
	|-->struct shmid_kernel //(shm.h)
		{   
			struct kern_ipc_perm    shm_perm;
			struct file     *shm_file;
			unsigned long       shm_nattch;
			unsigned long       shm_segsz;
			time64_t        shm_atim;
			time64_t        shm_dtim;
			time64_t        shm_ctim;
			pid_t           shm_cprid;
			pid_t           shm_lprid;
			struct user_struct  *mlock_user;
			
			/* The task created the shm object.  NULL if the task is dead. */
			struct task_struct  *shm_creator;
			struct list_head    shm_clist;  /* list by creator */
		} __randomize_layout;

	|-->static const struct file_operations shm_file_operations = { //(shm.c)
		    .mmap       = shm_mmap,
		    .fsync      = shm_fsync,
		    .release    = shm_release,
		    .get_unmapped_area  = shm_get_unmapped_area,
		    .llseek     = noop_llseek,
		    .fallocate  = shm_fallocate,
		};

	|-->struct shm_file_data { //(shm.c)
		    int id;
		    struct ipc_namespace *ns;
		    struct file *file;
		    const struct vm_operations_struct *vm_ops;
		};
		
	|-->SYSCALL_DEFINE6(ipc, unsigned int, call, int, first, unsigned long, second,
        unsigned long, third, void __user *, ptr, long, fifth) //(ipc/syscall.c)
		|-->case SEMGET
			|-->sys_semget //(syscall.c)
				|-->SYSCALL_DEFINE3(semget, key_t, key, int, nsems, int, semflg) //(sem.c)
					|-->static const struct ipc_ops sem_ops = {
    					    .getnew = newary,
    					    .associate = sem_security,
    					    .more_checks = sem_more_checks,
    					};

					|-->ipcget //(util.c)
						|-->if (params->key == IPC_PRIVATE)
							|-->ipcget_new //(util.c)
								|-->ops->getnew //(util.c)
									|-->newary //(sem.c)
										|-->ipc_rcu_alloc //()
										|-->security_sem_alloc //()
										|-->ipc_addid //(util.c)
											|-->idr_alloc //(idr.h)
												|-->idr_alloc_cmn //(idr.c)
													|-->radix_tree_is_internal_node //(radix-tree.h)
													|-->radix_tree_iter_init //(radix-tree.h)
													|-->idr_get_free //(radix-tree.h)
													|-->radix_tree_iter_replace //(radix-tree.h)
													|-->radix_tree_iter_tag_clear //(radix-tree.h)
												
											|-->ipc_buildid //(util.h)
												|-->return SEQ_MULTIPLIER * seq + id

										|-->sma->sem_perm.id //()

						|-->else
							|-->ipcget_public //(util.c)
								|-->ipc_findkey //(util.c)
									|-->idr_find //(idr.h)
										|-->radix_tree_lookup //(radix-tree.c)
											|-->__radix_tree_lookup //()

									|-->return ipc //(util.c)

								|-->ops->more_checks //(util.c)
									|-->sem_more_checks //(sem.c)
										|-->sem_security //(sem.c)

									|-->ipc_check_perms //(util.c)
										|-->ipcperms //(util.c)
											|-->security_ipc_permission //(security.c)
												|-->call_int_hook //()

										|-->ops->associate //(util.c)
											|-->sem_security //(sem.c)
												|-->security_sem_associate //(security.c)
													|-->call_int_hook //

		|-->case SEMCTL
			|-->sys_semctl //(syscall.c)

		|-->MSGSND
			|-->sys_msgsnd //(syscall.c)

		|-->MSGRCV
			|-->sys_msgrcv //(syscall.c)
	
		|-->MSGGET 
			|-->sys_msgget //(syscall.c)

		|-->MSGCTL
			|-->sys_msgctl //(syscall.c)

		|-->SHMAT
			|-->do_shmat //(syscall.c)
				|-->SYSCALL_DEFINE3(shmat, int, shmid, char __user *, shmaddr, int, shmflg) //(shm.c)
					|-->do_shmat //(shm.c)
						|-->alloc_file(&path, f_mode, is_file_hugepages(shp->shm_file) ? &shm_file_operations_huge : &shm_file_operations) //(file_table.c)
							|-->file->f_op = fop //(file_table.c) 将文件操作指针进行赋值操作

						|-->do_mmap_pgoff //(mm.h)
							|-->do_mmap //(mmap.c)
								|-->mmap_region //(mmap.c)
									|-->call_mmap //(fs.h)
										|-->file->f_op->mmap(file, vma) //(fs.h)
											|-->shm_mmap //(shm.c)
												|-->shm_file_data //()
												|-->__shm_open //()
												|-->

		|-->SHMDT
			|-->sys_shmdt //(syscall.c)

		|-->SHMGET
			|-->sys_shmget //(syscall.c)

		|-->SHMCTL
			|-->sys_shmctl //(syscall.c)
				|-->SYSCALL_DEFINE3(shmctl, int, shmid, int, cmd, struct shmid_ds __user *, buf) //(shm.c)
					|-->case IPC_SET:
						|-->copy_shmid_from_user //()
						
					|-->case IPC_RMID:
						|-->shmctl_down //(shm.c)
							|-->do_shm_rmid //(shm.c)
								|-->shm_destroy //(shm.c)



|-->create_ipc_ns //(namespace.c)
	|-->inc_ipc_namespaces //()
	
	|-->kmalloc //分配空间
	|-->ns_alloc_inum //()
	|-->ns->ns.ops = &ipcns_operations //(namespace.c)
		|-->const struct proc_ns_operations ipcns_operations = {
				.name       = "ipc",
				.type       = CLONE_NEWIPC,
				.get        = ipcns_get,
				.put        = ipcns_put,
				.install    = ipcns_install,
				.owner      = ipcns_owner,
			};
		
	|-->sem_init_ns //(sem.c)
		|-->ipc_init_ids(&ns->ids[IPC_SEM_IDS]) //(sem.c)
		
	|-->msg_init_ns //(msg.c)
		|-->ipc_init_ids(&ns->ids[IPC_MSG_IDS]) //(msg.c)
		
	|-->shm_init_ns //(shm.c)
		|-->ipc_init_ids(&shm_ids(ns)) //(util.c)
			|-->init_rwsem //(rwsem.h)
			|-->rhashtable_init(&ids->key_ht, &ipc_kht_params) //(util.c)
				|-->INIT_WORK(&ht->run_work, rht_deferred_worker) //(rhashtable.c)
					|-->rht_deferred_worker //(rhashtable.c) 工作队列
			
			|-->idr_init //(idr.h) 初始化搜索树
			
	|-->mq_init_ns //(mqueue.c)
		|-->kern_mount_data(&mqueue_fs_type, ns) //(mqueue.c)
			|-->static struct file_system_type mqueue_fs_type = {
					.name = "mqueue",
					.mount = mqueue_mount,
					.kill_sb = kill_litter_super,
					.fs_flags = FS_USERNS_MOUNT,
				};
