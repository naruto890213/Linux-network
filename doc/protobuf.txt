|-->PromptForAddress //(add_person.cc)

//Person类
|-->class Person : public ::google::protobuf::Message //(addressbook.pb.h) 

//AddressBook类
|-->class AddressBook : public ::google::protobuf::Message
	|-->AddressBook()
	|-->virtual ~AddressBook()

private:
  	|-->class HasBitSetters;
  	|-->::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  	|-->::google::protobuf::RepeatedPtrField< ::tutorial::Person > people_;
  	|-->mutable ::google::protobuf::internal::CachedSize _cached_size_;
  	|-->friend struct ::TableStruct_addressbook_2eproto;

|-->template <typename Element> 
	class RepeatedPtrField final : private internal::RepeatedPtrFieldBase //(repeated_field.h)
public:
	|-->RepeatedPtrField()
	|-->explicit RepeatedPtrField(Arena* arena)

private:
	|-->class TypeHandler
	|-->inline Arena* GetArenaNoVirtual() const
	|-->void ExtractSubrangeInternal(int start, int num, Element** elements,
                               std::true_type)
	|-->void ExtractSubrangeInternal(int start, int num, Element** elements,
                               std::false_type)
	|-->friend class Arena;
  	|-->friend class MessageLite;
  	|-->typedef void InternalArenaConstructable_

|-->namespace google //(data_proto2_to_proto3_util.h)
	|-->namespace protobuf //(data_proto2_to_proto3_util.h)
		|-->namespace util //(data_proto2_to_proto3_util.h)
			|-->

|-->class ExplicitlyConstructed //(message_lite.h)

|-->GOOGLE_PROTOBUF_VERIFY_VERSION //(add_person.cc)
	|-->::google::protobuf::internal::VerifyVersion //(common.h)
		|-->VerifyVersion //(common.cc)

|-->VerifyVersion //(common.cc)
	|-->if (GOOGLE_PROTOBUF_VERSION < minLibraryVersion)
		|-->GOOGLE_LOG(FATAL)

	|-->if (headerVersion < kMinHeaderVersionForLibrary)
		|-->GOOGLE_LOG(FATAL)

|-->AddressBook() //(addressbook.pb.cc)
	|-->::google::protobuf::Message()
	|-->_internal_metadata_(NULL)
	|-->SharedCtor()

|-->SharedCtor() //(addressbook.pb.cc)
	|-->::google::protobuf::internal::InitSCC(&scc_info_AddressBook_addressbook_2eproto.base)

|-->InitSCC //(generated_message_util.h)
	|-->auto status = scc->visit_status.load(std::memory_order_acquire)
	|-->if (GOOGLE_PREDICT_FALSE(status != SCCInfoBase::kInitialized))
		|-->InitSCCImpl(scc) //

|-->InitSCCImpl //(generated_message_util.cc)
	|-->InitProtobufDefaults
	|-->mu.Lock()
	|-->runner.store(me, std::memory_order_relaxed)
	|-->InitSCC_DFS(scc)
	|-->runner.store(std::thread::id{}, std::memory_order_relaxed)
	|-->mu.Unlock()

|-->address_book.add_people() //(add_person.cc)
	|-->people_.Add //(addressbook.pb.h)
		|-->
