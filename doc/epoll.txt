|-->SYSCALL_DEFINE1(epoll_create, int, size) //(fs/eventpoll.c)
	|-->sys_epoll_create1 //(eventpoll.c)
		|-->SYSCALL_DEFINE1(epoll_create1, int, flags) //(eventpoll.c)
			|-->ep_alloc //(eventpoll.c)
			|-->get_unused_fd_flags //()
			|-->anon_inode_getfile("[eventpoll]", &eventpoll_fops, ep, O_RDWR | (flags & O_CLOEXEC)) //(anon_inodes.c)
				|-->mntget //()
				|-->alloc_file //()

			|-->fd_install //(file.c)
				|-->__fd_install //(file.c)
					|-->rcu_assign_pointer //()


|-->SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd, struct epoll_event __user *, event)//(fs/eventpoll.c)
	|-->if op == EPOLL_CTL_ADD:
		|-->list_add(&tf.file->f_tfile_llink, &tfile_check_list)

	|-->ep_find //
	|-->case EPOLL_CTL_ADD:
		|-->ep_insert //(eventpoll.c)
			|-->init_poll_funcptr(&epq.pt, ep_ptable_queue_proc) //(poll.h)
				|-->pt->_qproc = qproc //(poll.h)

			|-->ep_item_poll //(eventpoll.c)
				|-->epi->ffd.file->f_op->poll //(eventpoll.c)
					|-->ep_eventpoll_poll //(eventpoll.c)
						|-->poll_wait //(poll.h)
							|-->p->_qproc(filp, wait_address, p) //(poll.h)
								|-->ep_ptable_queue_proc //(eventpoll.c)
									|-->init_waitqueue_func_entry(&pwq->wait, ep_poll_callback) //(wait.h)
										|-->wq_entry->func      = func; //(wait.h)

						|-->ep_call_nested(&poll_readywalk_ncalls, EP_MAX_NESTS,
                   				ep_poll_readyevents_proc, &arg, ep, current) //(eventpoll.c)
							|-->ep_poll_readyevents_proc //(eventpoll.c)
								|-->ep_read_events_proc //(eventpoll.c)

			|-->ep_rbtree_insert //()
			|-->ep_set_busy_poll_napi_id //()
			|-->ep_pm_stay_awake //()
			|-->waitqueue_active //()
			|-->ep_poll_safewake //(eventpoll.c)
				|-->ep_call_nested(&poll_safewake_ncalls, EP_MAX_NESTS, ep_poll_wakeup_proc, NULL, wq, (void *) (long) this_cpu) //(eventpoll.c)
					|-->ep_poll_wakeup_proc //(eventpoll.c)
						|-->ep_wake_up_nested //(eventpoll.c)
							|-->wake_up_locked_poll //(wait.h)
								|-->__wake_up_locked_key //(wait.c)
									|-->__wake_up_common //(wait.c)
										|-->curr->func(curr, mode, wake_flags, key) //(wait.c)
											|-->ep_poll_callback //(eventpoll.c)
												|-->

	|-->EPOLL_CTL_DEL:
		|-->ep_remove //()

	|-->EPOLL_CTL_MOD:
		|-->ep_modify //()

	|-->


|-->epoll_wait //
	|-->SYSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events, int, maxevents, int, timeout)//(eventpoll.c)
		|-->ep_poll //(eventpoll.c)
			|-->if(timeout > 0)
				
			|-->else if (timeout == 0) 
				
			|-->ep_send_events //(eventpoll.c)
				|-->ep_scan_ready_list(ep, ep_send_events_proc, &esed, 0, false) //(eventpoll.c)
					|-->ep_send_events_proc //(eventpoll.c)
						|-->ep_item_poll //(eventpoll.c) 见上面
							|-->epi->ffd.file->f_op->poll(epi->ffd.file, pt) //(eventpoll.c)
								|-->ep_eventpoll_poll //(eventpoll.c)
									|-->poll_wait //(poll.h)
										|-->p->_qproc(filp, wait_address, p) //(poll.h)
											|-->ep_ptable_queue_proc //(eventpoll.c)
												|-->init_waitqueue_func_entry(&pwq->wait, ep_poll_callback) //(wait.h)
													|-->wq_entry->func      = func; //(wait.h)

									|-->ep_call_nested(&poll_readywalk_ncalls, EP_MAX_NESTS, ep_poll_readyevents_proc, &arg, ep, current) //(eventpoll.c)
										|-->(*nproc)(priv, cookie, call_nests)//(eventpoll.c)
											|-->ep_poll_readyevents_proc //(eventpoll.c)
												|-->ep_scan_ready_list(arg->ep, ep_read_events_proc, NULL, call_nests + 1, arg->locked)//(eventpoll.c)
													|-->(*sproc)(ep, &txlist, priv) //(eventpoll.c)
														|-->ep_read_events_proc //(eventpoll.c)
															|-->init_poll_funcptr(&pt, NULL) //(eventpoll.c)
															|-->ep_item_poll //(eventpoll.c)
															
